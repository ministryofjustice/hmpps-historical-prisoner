generic-service:
  nameOverride: hmpps-historical-prisoner
  productId: 'DPS065'
  serviceAccountName: "hmpps-historical-prisoner"

  replicaCount: 4

  image:
    repository: quay.io/hmpps/hmpps-historical-prisoner
    tag: app_version # override at deployment time
    port: 3000

  ingress:
    enabled: true
    host: app-hostname.local # override per environment
    tlsSecretName: historical-prisoner-cert
    modsecurity_enabled: true
    modsecurity_snippet: |
      SecRuleEngine On
      # team here grants access to the OpenSearch logs to delve into the cause of the blockage
      SecDefaultAction "phase:2,pass,log,tag:github_team=syscon-devs,tag:namespace={{ .Release.Namespace }}"
      # Default is only GET HEAD POST OPTIONS so need to include PUT etc.
      SecAction "id:900200,phase:1,nolog,pass,t:none,setvar:tx.allowed_methods=GET HEAD POST OPTIONS,setvar:tx.paranoia_level=3"
      # Searching for prisoners gives Invalid character in request (outside of printable chars below ascii 127) so remove
      SecRuleRemoveById 920272
      # Allow 1c in request cookie and csrf for SQL Injection Attack Detected via libinjection
      SecRuleUpdateTargetById 942100 "!ARGS:_csrf"
      SecRuleUpdateTargetById 942100 "!REQUEST_COOKIES:/connect.sid/"
      SecRuleUpdateTargetById 942100 "!REQUEST_COOKIES:/hmpps-historical-prisoner.session/"
      # Allow -- in session cookie and csrf for SQL Comment Sequence Detected
      SecRuleUpdateTargetById 942440 "!ARGS:_csrf"
      SecRuleUpdateTargetById 942440 "!REQUEST_COOKIES:/connect.sid/"
      SecRuleUpdateTargetById 942440 "!REQUEST_COOKIES:/hmpps-historical-prisoner.session/"
      # Change default denial to be a 406 so that we can tell easily that it is modsecurity doing the blocking
      SecRuleUpdateActionById 949110 "t:none,deny,status:406,logdata:%{SERVER_NAME}"
      SecRuleUpdateActionById 959100 "t:none,deny,status:406,logdata:%{SERVER_NAME}"

  livenessProbe:
    httpGet:
      path: /ping

  readinessProbe:
    httpGet:
      path: /ping

  # Environment variables to load into the deployment
  env:
    NODE_ENV: 'production'
    REDIS_ENABLED: 'true'
    REDIS_TLS_ENABLED: 'true'
    TOKEN_VERIFICATION_ENABLED: 'true'
    AUDIT_SQS_REGION: 'eu-west-2'
    AUDIT_SERVICE_NAME: 'hmpps-historical-prisoner'

  namespace_secrets:
    application-insights:
      APPLICATIONINSIGHTS_CONNECTION_STRING: "APPLICATIONINSIGHTS_CONNECTION_STRING"
    hmpps-historical-prisoner:
      AUTH_CODE_CLIENT_ID: 'AUTH_CODE_CLIENT_ID'
      AUTH_CODE_CLIENT_SECRET: 'AUTH_CODE_CLIENT_SECRET'
      SESSION_SECRET: 'SESSION_SECRET'
    elasticache-redis:
      REDIS_HOST: 'primary_endpoint_address'
      REDIS_AUTH_TOKEN: 'auth_token'
    sqs-hmpps-audit-secret:
      AUDIT_SQS_QUEUE_URL: "sqs_queue_url"

  allowlist:
    groups:
      - internal

generic-prometheus-alerts:
  targetApplication: hmpps-historical-prisoner

gotenberg:
  nameOverride: gotenberg
  replicaCount: 4

  image:
    repository: gotenberg/gotenberg
    tag: 8.14.1
    port: 3000

  containerCommand: [ "gotenberg" ]
  containerArgs:
    [
      "--chromium-ignore-certificate-errors",
      "--pdfengines-merge-engines=pdftk",
      "--libreoffice-disable-routes",
      "--webhook-disable",
      "--prometheus-disable-collect"
    ]

  ingress:
    enabled: false

  livenessProbe:
    httpGet:
      path: /health
    periodSeconds: 30
    initialDelaySeconds: 60
    timeoutSeconds: 20
    failureThreshold: 10

  readinessProbe:
    httpGet:
      path: /health
    periodSeconds: 20
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 15

  podSecurityContext:
    fsGroup: 1001

  securityContext:
    runAsUser: 1001
    privileged: false
    runAsNonRoot: true
